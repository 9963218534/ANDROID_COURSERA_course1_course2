SHAIK ISMAIL

Congratulations! You passed!
Grade received 100%
To pass 80% or higher

Go to next item
1.
Question 1
In the Practice defining listeners in Android exercise, when you ran the code, what did the app show on its screen?

1 / 1 point

Empty screen


Toast message with text - Data saved


A button with text Save Data written on it.

Correct
Correct! You implemented the button code correctly in the layout file. 

2.
Question 2
What was the result of clicking the button with text Save Data?

1 / 1 point

A toast message with text - Data saved appears on the screen.


Nothing happens


Button disappears

Correct
Correct! You implemented the click listener using a lambda expression correctly. 

3.
Question 3
Choose the options with the correct lambda expression syntax implementation.

1 / 1 point

button.setOnClickListener { view ->  println(view.id) }

Correct
Correct! You can define a lambda expression without the parenthesis if the only parameter is the lambda itself and then can define an arbitrary name to the lambda parameter. 


button.setOnClickListener( println(it.id) )


 button.setOnClickListener { println(it.id) }

Correct
Correct! You can define a lambda expression without the parenthesis if the only parameter is the lambda itself and then can if no arbitrary name is assigned to the lambda parameter, access it using it keyword.


-----------------------------------------------------------------------------------------------------


Congratulations! You passed!
Grade received 100%
To pass 80% or higher

Go to next item
1.
Question 1
Which of these are correct ways to instantiate a function type. Select all that apply.

1 / 1 point

Using the function name.


Using a lambda expression.

Correct
Correct! You can use a lambda expression to instantiate a function type.


Using a callable reference to existing declaration using the ‘::’ operator

Correct
Correct! You can use a callable reference such as ‘::functionName’.


Using instance of a user defined class that implements a function type as an interface.

Correct
Correct! You can instantiate a function using a defined class that implements a function type as an interface.

2.
Question 2
Which of these is a syntactically valid function type?

1 / 1 point

(Int) -> Int, String


Int, Int -> (String)


(Int, Int) -> String

Correct
Correct! You define the list of parameters enclosed in a parenthesis, followed by arrow notation and the return type.

3.
Question 3
Which of these is a correct lambda expression syntax?

1 / 1 point

x: Int, y: Int -> x * y


{ x: Int, y: Int -> x * y }


x: Int, y: Int -> { x * y }

Correct
Correct! This is the correct syntax.

4.
Question 4
Which of these would output ‘hello world’ when the function defined below is called?

123
fun execute(string: String, function: (String) -> String) {  println(function(string))}
fun execute(string: String, function: (String) -> String) { 
 println(function(string))
}

1 / 1 point

execute("hello") { "world" }


execute("hello") { "$it world" }


execute { "hello world" }

Correct
Correct! The implicit argument ‘it’ will contain the value ‘hello’ and hence concatenated string, ‘hello world’ will be printed.

5.
Question 5
Which listener interface provided by the Android framework is used to listen for button press events?

1 / 1 point

View.OnPressListener


View.OnClickListener


View.OnTapListener

Correct
Correct! The ‘View’ class contains an interface ‘OnClickListener’ that has a method ‘onClick’ which gets called on events such as a button press.


-----------------------------------------------------------------------------------------------------


Congratulations! You passed!
Grade received 100%
To pass 80% or higher

Go to next item
1.
Question 1
While the code in The repeat function exercise uses a function to generate random numbers, which of the following is a valid output for the wheel spin attempts?

1 / 1 point

Attempt 1: 3 

Attempt 2: 10

Attempt 3: 8


Attempt 1: 4 

Attempt 2: 8

Attempt 3: 5


Attempt 1: 3.25

Attempt 2: 6.5

Attempt 3: 8

Correct
Correct! Random.nextInt(10) can return integer values from 0 to 9.

2.
Question 2
Which of the following is the correct function definition for the repeat function?

1 / 1 point

fun repeat(action: (Int) -> Unit)


fun repeat(times: Int, action: (Int) -> Unit)


fun repeat(times: Int, action: () -> Unit)

Correct
Correct! The first parameter represents the number of iterations and the second parameter represents a function type which takes in an integer parameter with its value as the index position in the iteration.

3.
Question 3
Which of the following constructs is the repeat function similar to? 

1 / 1 point

If statement


For loop


While loop

Correct
Correct! The repeat function is similar to a for loop where you define the number of iterations beforehand. 




-----------------------------------------------------------------------------------------------------



Congratulations! You passed!
Grade received 100%
To pass 80% or higher

Go to next item
1.
Question 1
What is a higher-order function?

1 / 1 point

A function that depends on another function for its output.


A higher-order function is a function that does not return any value.


A function that takes functions as parameters, or returns a function.

Correct
Correct! A higher-order function is a functional programming concept that allows function to be passed just as objects of other data types.

2.
Question 2
Which of these is a correct way to call the function greet:

12345678910
  fun greet(name: String, function: (name: String) -> Unit) { function(name)}  fun print(name: String) { println("Hello $name")}


fun greet(name: String, function: (name: String) -> Unit) {
 function(name)
}


fun print(name: String) {
 println("Hello $name")
}

1 / 1 point

greet { print(it) } (“Joe”)


greet("Joe", ::print)

Correct
Correct! You can use the :: operator to obtain the reference of a function.


greet("Joe", print)


greet("Joe") { println("Hi $it") }

Correct
Correct! You can pass a function as a lambda expression to a higher-order function.

3.
Question 3
Which of the following constructs is the repeat function similar to? 

1 / 1 point

If statement 


for loop 


while loop 

Correct
Correct! The repeat function is similar to a for loop where you define the number of iterations beforehand. 

4.
Question 4
What is the output of the following code?

123456
val number = 2var output = 1repeat(3) { index -> output += (index * number)}println(output)
val number = 2
var output = 1
repeat(3) { index ->
 output += (index * number)
}
println(output)

1 / 1 point

13


6


7

Correct
Correct, this is the right result.


-----------------------------------------------------------------------------------------------------



Congratulations! You passed!
Grade received 100%
To pass 80% or higher

Go to next item
1.
Question 1
What was the sales tax amount output (up to 2 decimal places) when you ran your exercise’s code?

1 / 1 point

8.98


9.59


7.71

Correct
Correct! You correctly implemented the exercise instructions.

2.
Question 2
What would be the sales tax output (up to 2 decimal places) if you change the month to August and the sales tax percentage to 7.5%?

1 / 1 point

4.95


5.02


6.38

Correct
Correct! You correctly implemented the exercise instructions.

3.
Question 3
Which of the following functions does not return a List when called on an instance of List?

1 / 1 point

fold


map


filter

Correct
Correct! The fold function would return an accumulated value starting from an initial value and applying an operation to an accumulated value and each element. 


-----------------------------------------------------------------------------------------------------



Congratulations! You passed!
Grade received 100%
To pass 80% or higher

Go to next item
1.
Question 1
What is the output of the following code?

123456
var sum = 0val numberList = listOf(2, 8, 3, 11) numberList.forEach { number -> sum += number}println(sum)
var sum = 0
val numberList = listOf(2, 8, 3, 11) 
numberList.forEach { number ->
 sum += number
}
println(sum)

1 / 1 point

11


2


24

Correct
Correct! The code would iterate over each element and then add each element’s value to a variable named sum.

2.
Question 2
What is the output of this code:

123456789101112131415
data class Car(val color: String,val amount: Int)val list = listOf( Car("Black", 43000), Car("Red", 30000), Car("White", 36000))val output = list.map {  it.color}  println(output)
data class Car(
val color: String,
val amount: Int
)
val list = listOf(
 Car("Black", 43000),
 Car("Red", 30000),
 Car("White", 36000)
)
val output = list.map { 


1 / 1 point

[43000, 30000, 36000]


[Car(color=Black, amount=43000), Car(color=Red, amount=30000), Car(color=White, amount=36000)]


[Black, Red, White]

Correct
Correct! The code transforms the initial list into a new list that contains values of color.

3.
Question 3
What do you expect to get as the output of this code? 

123456789
val list = listOf(1, 3, 4, 7)  val output = list.fold(3) { x, y -> x + y}  println(output)
val list = listOf(1, 3, 4, 7)


val output = list.fold(3) { x, y ->
 x + y
}


println(output)

1 / 1 point

12


3


18

Correct
Correct! The fold function accumulates a value starting from the initial value of 3 and then applies the operation to each element in the list.

4.
Question 4
What output would you expect for this code?

1234567891011121314
val numberMap = mapOf( 5 to 6, 3 to 2, 8 to 7, 4 to 1)val output = numberMap.map { entry -> entry.value}.filter {  it > 3}.fold(0) { x, y -> x + y}println(output)
val numberMap = mapOf(
 5 to 6,
 3 to 2,
 8 to 7,
 4 to 1
)
val output = numberMap.map { entry ->
 entry.value
}.filter { 
 it > 3


1 / 1 point

17


3


13

Correct
Correct! You correctly computed the outputs of the map, filter and fold functions in the code.

5.
Question 5
What is the output of the code below: 

12345678910111213
data class Car( val color: String, val amount: Int ) val list = listOf(     Car("Black", 43000),     Car("Red", 30000),     Car("White", 36000) )  val output = list.filter { car ->     car.amount > 35000 } println(output) 
data class Car( 
val color: String, 
val amount: Int 
) 
val list = listOf( 
    Car("Black", 43000), 
    Car("Red", 30000), 
    Car("White", 36000) 
)  
val output = list.filter { car -> 


1 / 1 point

[Car(color=Black, amount=43000), Car(color=White, amount=36000)]


Correct
Correct! This code above filters the ‘car’ elements that have ‘amount’ > 35000, and returns a new list with only those elements that comply with the condition.


[Car(color=Red, amount=30000)]


[Car(color=Black, amount=43000), Car(color=Red, amount=30000), Car(color=White, amount=36000)]



-----------------------------------------------------------------------------------------------------

