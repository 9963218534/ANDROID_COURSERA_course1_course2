SHAIK ISMAIL

Congratulations! You passed!
Grade received 100%
To pass 80% or higher

Go to next item
1.
Question 1
What was the output when you ran your solution?

1 / 1 point

Onion,

Cheese,

 Water


[Onion, Cheese, Water]


[Onion, Cheese, Water, Salt]

Correct
Correct! This is how Kotlin’s println outputs a list of strings and these are the ingredients that remain in the onion soup dish after removing salt. 

2.
Question 2
Replace the Salt string in the removeSalt extension function with Cheese. Run the code. What is the output?

1 / 1 point

[Onion, Water, Salt]


[Onion, Cheese, Water]


[Onion, Water]

Correct
Correct! Salt is no longer removed from the list. Instead, cheese is removed. 

3.
Question 3
Little Lemon asks you to write a new extension function to remove an ingredient (provided as a string) from a dish. Which of these extension functions will perform the requested task?

1 / 1 point

fun String.removeIngredient(dish: Dish) { dish.ingredients.remove(this) }

Correct
Correct! This function will extend the String class with the capability of removing ingredients from a provided dish. 


fun Dish.removeIngredient(ingredient: String) { ingredients.remove(ingredient) } 

Correct
Correct! This function will extend Dish with the capability of removing ingredients by name. 


fun String.removeIngredient(ingredient: String) { remove(ingredient) } 


-----------------------------------------------------------------------------------------------------



Congratulations! You passed!
Grade received 100%
To pass 80% or higher

Go to next item
1.
Question 1
Which of the below can be inherited? Select all that apply.

1 / 1 point

An open class

Correct
Correct! Open classes are open for extension and can be inherited.


A final class


An interface

Correct
Correct! Interfaces are designed to be inherited.


An object

2.
Question 2
Extension functions can be quite useful. Which of these are benefits of extension functions? Select all that apply.

1 / 1 point

They can access private properties and functions of the extended class.


They can be called just like normal functions of the extended class.

Correct
Correct! Extension functions are called using the same syntax as normal functions.


They allow extending final and 3rd party classes.

Correct
Correct! Extension functions let you extend behavior of classes that cannot or should not otherwise be modified.


They can override existing functions of a class.

3.
Question 3
You are asked to implement an extension function for the final Dish class that would print out its ingredients field. How would the extension function look?

1 / 1 point

fun Dish.printIngredients(ingredients: List<Ingredient>) { println(ingredients) }


fun Dish.printIngredients() { println(ingredients) }


fun List<Ingredient>.printIngredients(dish: Dish) { println(this) }


fun printIngredients(dish: Dish) { println(dish.ingredients) }

Correct
Correct! This is the right syntax for the requested extension function.


-----------------------------------------------------------------------------------------------------



Congratulations! You passed!
Grade received 100%
To pass 80% or higher

Go to next item
1.
Question 1
How do you convert the regular function into the test function?

1 / 1 point

Mark the class where it is located with Test annotation.


Append test_ prefix to the function name.    


Mark the function with Test annotation.

Correct
Correct! Test annotation enables the function be to run as test.

2.
Question 2
What is the correct order of AAA pattern?

1 / 1 point

Assert – Act – Arrange


Act – Arrange – Assert


Arrange – Act – Assert

Correct
Correct! First, you set up the test environment. Next, execute the operation under test and then, examine the outcome.    

3.
Question 3
Which of three tests for Product class will fail, if you change the minimum amount for discount from 5 to 10? (Hint: update the applyDiscount function and see)  

1 / 1 point

The first and the second tests will fail.


Only the second test will fail.


All tests will fail.

Correct
Correct! The first test case still passes, as given amount for spaghetti, 3, is still less than minimum amount and it is eligible for discount, while the last test case (out of stock), is not affected by changes.   



-----------------------------------------------------------------------------------------------------



Congratulations! You passed!
Grade received 100%
To pass 80% or higher

Go to next item
1.
Question 1
When you run your solution for the exercise Defining generic classes and functions, what is the output?

1 / 1 point

2


1


[Cheese, Cheese]

Correct
Correct! Since addIngredient was called twice, contents holds two elements.

2.
Question 2
If you replaced the type passed to newInventory from Cheese to Onion, when you run your solution, which of the following would be a valid statement?

1 / 1 point

cheeseInventory.addIngredient(Onion)


cheeseInventory.addIngredient(Cheese)


cheeseInventory.addIngredient("Onion")

Correct
Correct! After your change, the addIngredient function of cheeseInventory only accepts arguments of type Onion.

3.
Question 3
For the code implemented in Step 2 of the exercise, which of the below statements are valid? 

1 / 1 point

Inventory<Flour>()

Correct
Correct! Flour implements Ingredient and is a valid generic type for Inventory. 


Inventory<Egg>()

Correct
Correct! Egg inherits from Ingredient and is therefore a valid generic type for Inventory.


Inventory<"Milk">()


-----------------------------------------------------------------------------------------------------



Congratulations! You passed!
Grade received 100%
To pass 80% or higher

Go to next item
1.
Question 1
What operations can you perform on a MutableCollection but not on a Collection? 

1 / 1 point

Get a count of the elements in the collection.


Read an element.


Remove an element.

Correct
Correct! You can only remove an element from a MutableCollection.


Add an element.

Correct
Correct! You can only add an element to a MutableCollection.

2.
Question 2
Which of the following statements declares a generic class in Kotlin?

1 / 1 point

class GenericClass


abstract class GenericClass


generic class GenericClass


class GenericClass<TYPE>

Correct
Correct! This is the right syntax for declaring a generic class.

3.
Question 3
You need to instantiate a field named employeeNames of type List<String>. Which of the following statements is valid in Kotlin?

1 / 1 point

val employeeNames: List<String> = ["James", "Ella"]


val employeeNames: List<String> = listOf("James", "Ella")


val employeeNames: List<String> = "James, Ella"


val employeeNames: List<String> = ("James", "Ella")

Correct
Correct! This is the correct syntax for instantiating a list of strings.



-----------------------------------------------------------------------------------------------------

